# -*- coding: utf-8 -*-
"""PROYECTO FINAL

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gro52c3fztQMxsvgu9xZdYbtRL5R7_Kb
"""

import pandas as pd
df=pd.read_csv('https://raw.githubusercontent.com/Alexander117161/Df-limpio/refs/heads/master/Practica%202%20Intro%20CD%20df_limpio.csv')
df.head()

# Importar las bibliotecas necesarias
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Filtrar solo la variable 'latitude'
variable = 'latitude'

# Histograma
plt.figure(figsize=(10, 6))
sns.histplot(df[variable], kde=True, bins=30, color='skyblue')
plt.title(f'Histograma de {variable}', fontsize=16)
plt.xlabel(variable, fontsize=14)
plt.ylabel('Frecuencia', fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x=df[variable], color='lightgreen')
plt.title(f'Boxplot de {variable}', fontsize=16)
plt.xlabel(variable, fontsize=14)
plt.show()

# Gráfico de violín
plt.figure(figsize=(8, 6))
sns.violinplot(x=df[variable], color='lightcoral')
plt.title(f'Gráfico de Violín de {variable}', fontsize=16)
plt.xlabel(variable, fontsize=14)
plt.show()

variable1 = 'longitude'

# Histograma
plt.figure(figsize=(10, 6))
sns.histplot(df[variable], kde=True, bins=30, color='skyblue')
plt.title(f'Histograma de {variable1}', fontsize=16)
plt.xlabel(variable1, fontsize=14)
plt.ylabel('Frecuencia', fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x=df[variable1], color='lightgreen')
plt.title(f'Boxplot de {variable1}', fontsize=16)
plt.xlabel(variable, fontsize=14)
plt.show()

# Gráfico de violín
plt.figure(figsize=(8, 6))
sns.violinplot(x=df[variable1], color='lightcoral')
plt.title(f'Gráfico de Violín de {variable1}', fontsize=16)
plt.xlabel(variable1, fontsize=14)
plt.show()

variable2= 'last_updated_epoch'

# Histograma
plt.figure(figsize=(10, 6))
sns.histplot(df[variable2], kde=True, bins=30, color='skyblue')
plt.title(f'Histograma de {variable2}', fontsize=16)
plt.xlabel(variable2, fontsize=14)
plt.ylabel('Frecuencia', fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x=df[variable2], color='lightgreen')
plt.title(f'Boxplot de {variable2}', fontsize=16)
plt.xlabel(variable2, fontsize=14)
plt.show()

# Gráfico de violín
plt.figure(figsize=(8, 6))
sns.violinplot(x=df[variable2], color='lightcoral')
plt.title(f'Gráfico de Violín de {variable2}', fontsize=16)
plt.xlabel(variable2, fontsize=14)
plt.show()

variable3= 'temperature_celsius'

# Histograma
plt.figure(figsize=(10, 6))
sns.histplot(df[variable3], kde=True, bins=30, color='skyblue')
plt.title(f'Histograma de {variable3}', fontsize=16)
plt.xlabel(variable3, fontsize=14)
plt.ylabel('Frecuencia', fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x=df[variable3], color='lightgreen')
plt.title(f'Boxplot de {variable3}', fontsize=16)
plt.xlabel(variable3, fontsize=14)
plt.show()

# Gráfico de violín
plt.figure(figsize=(8, 6))
sns.violinplot(x=df[variable3], color='lightcoral')
plt.title(f'Gráfico de Violín de {variable3}', fontsize=16)
plt.xlabel(variable3, fontsize=14)
plt.show()

variable4 = 'temperature_fahrenheit'

# Histograma
plt.figure(figsize=(10, 6))
sns.histplot(df[variable4], kde=True, bins=30, color='skyblue')
plt.title(f'Histograma de {variable4}', fontsize=16)
plt.xlabel(variable4, fontsize=14)
plt.ylabel('Frecuencia', fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x=df[variable4], color='lightgreen')
plt.title(f'Boxplot de {variable4}', fontsize=16)
plt.xlabel(variable4, fontsize=14)
plt.show()



# Gráfico de violín
plt.figure(figsize=(8, 6))
sns.violinplot(x=df[variable4], color='lightcoral')
plt.title(f'Gráfico de Violín de {variable4}', fontsize=16)
plt.xlabel(variable4, fontsize=14)
plt.show()

variable5 = 'wind_mph'

# Histograma
plt.figure(figsize=(10, 6))
sns.histplot(df[variable5], kde=True, bins=30, color='skyblue')
plt.title(f'Histograma de {variable5}', fontsize=16)
plt.xlabel(variable5, fontsize=14)
plt.ylabel('Frecuencia', fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x=df[variable5], color='lightgreen')
plt.title(f'Boxplot de {variable5}', fontsize=16)
plt.xlabel(variable5, fontsize=14)
plt.show()

# Gráfico de violín
plt.figure(figsize=(8, 6))
sns.violinplot(x=df[variable5], color='lightcoral')
plt.title(f'Gráfico de Violín de {variable5}', fontsize=16)
plt.xlabel(variable5, fontsize=14)
plt.show()

variable6 = 'wind_kph'

# Histograma
plt.figure(figsize=(10, 6))
sns.histplot(df[variable6], kde=True, bins=30, color='skyblue')
plt.title(f'Histograma de {variable6}', fontsize=16)
plt.xlabel(variable6, fontsize=14)
plt.ylabel('Frecuencia', fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x=df[variable6], color='lightgreen')
plt.title(f'Boxplot de {variable6}', fontsize=16)
plt.xlabel(variable6, fontsize=14)
plt.show()

# Gráfico de violín
plt.figure(figsize=(8, 6))
sns.violinplot(x=df[variable6], color='lightcoral')
plt.title(f'Gráfico de Violín de {variable6}', fontsize=16)
plt.xlabel(variable6, fontsize=14)
plt.show()

variable7 = 'wind_degree'

# Histograma
plt.figure(figsize=(10, 6))
sns.histplot(df[variable7], kde=True, bins=30, color='skyblue')
plt.title(f'Histograma de {variable7}', fontsize=16)
plt.xlabel(variable7, fontsize=14)
plt.ylabel('Frecuencia', fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x=df[variable7], color='lightgreen')
plt.title(f'Boxplot de {variable7}', fontsize=16)
plt.xlabel(variable7, fontsize=14)
plt.show()

# Gráfico de violín
plt.figure(figsize=(8, 6))
sns.violinplot(x=df[variable7], color='lightcoral')
plt.title(f'Gráfico de Violín de {variable7}', fontsize=16)
plt.xlabel(variable7, fontsize=14)
plt.show()

variable8 = 'pressure_mb'

# Histograma
plt.figure(figsize=(10, 6))
sns.histplot(df[variable8], kde=True, bins=30, color='skyblue')
plt.title(f'Histograma de {variable8}', fontsize=16)
plt.xlabel(variable8, fontsize=14)
plt.ylabel('Frecuencia', fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x=df[variable8], color='lightgreen')
plt.title(f'Boxplot de {variable8}', fontsize=16)
plt.xlabel(variable8, fontsize=14)
plt.show()

# Gráfico de violín
plt.figure(figsize=(8, 6))
sns.violinplot(x=df[variable8], color='lightcoral')
plt.title(f'Gráfico de Violín de {variable8}', fontsize=16)
plt.xlabel(variable8, fontsize=14)
plt.show()

variable9 = 'pressure_in'

# Histograma
plt.figure(figsize=(10, 6))
sns.histplot(df[variable9], kde=True, bins=30, color='skyblue')
plt.title(f'Histograma de {variable9}', fontsize=16)
plt.xlabel(variable9, fontsize=14)
plt.ylabel('Frecuencia', fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x=df[variable9], color='lightgreen')
plt.title(f'Boxplot de {variable9}', fontsize=16)
plt.xlabel(variable9, fontsize=14)
plt.show()

# Gráfico de violín
plt.figure(figsize=(8, 6))
sns.violinplot(x=df[variable9], color='lightcoral')
plt.title(f'Gráfico de Violín de {variable9}', fontsize=16)
plt.xlabel(variable9, fontsize=14)
plt.show()

# Gráfico de barras para la variable 'country'
plt.figure(figsize=(20, 5))
sns.countplot(data=df, x='country', palette='Set2')
plt.title('Distribución de categorías en Country', fontsize=16)
plt.xlabel('País', fontsize=14)
plt.ylabel('Frecuencia', fontsize=14)
plt.xticks(rotation=45, ha='right')  # Rotar las etiquetas si es necesario
plt.tight_layout()

# Mostrar el gráfico
plt.show()

# Gráfico de barras para la variable 'country'
plt.figure(figsize=(20, 5))
sns.countplot(data=df, x='location_name', palette='Set2')
plt.title('Distribución en Location Name', fontsize=16)
plt.xlabel('País', fontsize=14)
plt.ylabel('Frecuencia', fontsize=14)
plt.xticks(rotation=45, ha='right')  # Rotar las etiquetas si es necesario
plt.tight_layout()

# Mostrar el gráfico
plt.show()

# Gráfico de barras para la variable 'country'
plt.figure(figsize=(15, 5))
sns.countplot(data=df, x='timezone', palette='Set2')
plt.title('Distribución de Timezone', fontsize=16)
plt.xlabel('TimeZone', fontsize=14)
plt.ylabel('Frecuencia', fontsize=14)
plt.xticks(rotation=45, ha='right')  # Rotar las etiquetas si es necesario
plt.tight_layout()

# Mostrar el gráfico
plt.show()

# Gráfico de barras para la variable 'country'
plt.figure(figsize=(15, 5))
sns.countplot(data=df, x='condition_text', palette='Set2')
plt.title('Distribución de Condition text', fontsize=16)
plt.xlabel('Condition', fontsize=14)
plt.ylabel('Frecuencia', fontsize=14)
plt.xticks(rotation=45, ha='right')  # Rotar las etiquetas si es necesario
plt.tight_layout()

# Mostrar el gráfico
plt.show()

# Gráfico de barras para la variable 'country'
plt.figure(figsize=(15, 5))
sns.countplot(data=df, x='wind_direction', palette='Set2')
plt.title('Distribución de Wind Direction', fontsize=16)
plt.xlabel('Direction', fontsize=14)
plt.ylabel('Frecuencia', fontsize=14)
plt.xticks(rotation=45, ha='right')  # Rotar las etiquetas si es necesario
plt.tight_layout()

# Mostrar el gráfico
plt.show()

# Filtrar las variables numéricas
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Calcular la matriz de correlación
correlation_matrix = df[numerical_columns].corr()

# Generar el heatmap de la matriz de correlación
plt.figure(figsize=(20, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Matriz de correlación entre variables numéricas', fontsize=16)
plt.tight_layout()

# Mostrar el gráfico
plt.show()

# Calcular la matriz de correlación
correlation_matrix = df[numerical_columns].corr()

# Definir un umbral de correlación significativa (por ejemplo, mayor que 0.7 o menor que -0.7)
threshold = 0.7

# Extraer las parejas de variables correlacionadas
pairs_to_plot = []

for i in range(len(correlation_matrix.columns)):
    for j in range(i):
        if abs(correlation_matrix.iloc[i, j]) > threshold:
            pairs_to_plot.append((correlation_matrix.columns[i], correlation_matrix.columns[j]))

# Crear gráficos de dispersión para cada par de variables correlacionadas
for var1, var2 in pairs_to_plot:
    plt.figure(figsize=(8, 6))
    sns.scatterplot(data=df, x=var1, y=var2, alpha=0.7, color='b')
    plt.title(f'Gráfico de dispersión entre {var1} y {var2}', fontsize=16)
    plt.xlabel(var1, fontsize=14)
    plt.ylabel(var2, fontsize=14)
    plt.tight_layout()

    # Mostrar el gráfico
    plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Visualización de los datos faltantes con un mapa de calor
plt.figure(figsize=(12, 8))
sns.heatmap(df.isnull(), cbar=False, cmap='viridis', yticklabels=False)
plt.title('Mapa de Calor de Datos Faltantes')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Gráfico de caja (Boxplot) comparando 'temperature' según 'country'
plt.figure(figsize=(12, 6))
sns.boxplot(x='wind_direction', y='longitude', data=df)
plt.title('BoxPlot')
plt.xticks(rotation=90)  # Gira las etiquetas del eje X para mejor visibilidad
plt.show()

# Gráfico de violín comparando 'temp' según 'country'
plt.figure(figsize=(12, 6))
sns.violinplot(x='wind_direction', y='longitude', data=df)
plt.title('Violin Plot')
plt.xticks(rotation=90)  # Gira las etiquetas del eje X para mejor visibilidad
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Selecciona solo las variables numéricas para el análisis de correlación
numerical_columns = ['temperature_celsius', 'humidity','wind_kph', 'latitude', 'longitude']
corr_matrix = df[numerical_columns].corr()

# Crear el heatmap para visualizar las correlaciones
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Matriz de Correlación entre Variables Numéricas')
plt.show()

# Importar librerías necesarias
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Cargar el dataset desde la URL proporcionada
url = 'https://raw.githubusercontent.com/Alexander117161/Df-limpio/refs/heads/master/Practica%202%20Intro%20CD%20df_limpio.csv'
data = pd.read_csv(url)

# Seleccionar características (features) y el objetivo (target)
features = ['humidity', 'wind_mph', 'pressure_mb', 'cloud']
target = 'temperature_celsius'

# Filtrar las columnas necesarias y eliminar valores nulos
df = data[features + [target]].dropna()

# Separar variables independientes (X) y dependiente (y)
X = df[features]
y = df[target]

# Dividir los datos en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Crear el modelo de regresión lineal
model = LinearRegression()

# Entrenar el modelo
model.fit(X_train, y_train)

# Predecir en el conjunto de prueba
y_pred = model.predict(X_test)

# Evaluación del modelo
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R2 Score: {r2}")

# Visualizar resultados
plt.scatter(y_test, y_pred, alpha=0.7)
plt.xlabel("Valores Reales")
plt.ylabel("Predicciones")
plt.title("Regresión Lineal: Predicción vs Realidad")
plt.show()

# Cargar el archivo CSV
file_path = 'https://raw.githubusercontent.com/Alexander117161/Df-limpio/refs/heads/master/Practica%202%20Intro%20CD%20df_limpio.csv'
df = pd.read_csv(file_path, encoding='latin1')

# Gráfica 5: Dispersión - Relación entre temperatura y humedad
plt.figure(figsize=(8, 6))
sns.scatterplot(data=df, x='temperature_celsius', y='humidity', alpha=0.7, color='blue', edgecolor='w')
plt.title('Relación entre Temperatura y Humedad')
plt.xlabel('Temperatura (°C)')
plt.ylabel('Humedad (%)')
plt.grid(True, linestyle='--', alpha=0.6)
plt.show()